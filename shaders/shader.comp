#version 450

layout (local_size_x = 16, local_size_y = 16) in;
// The output of the raytracing pass is going to be written here
layout (binding = 0, rgba8) uniform writeonly image2D resultImage;

// UBO for storing various data
layout(binding = 1) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
} ubo;

struct Triangle {
    mediump vec3 v0;
    mediump vec3 v1;
    mediump vec3 v2;
    mediump vec3 normal;
};

layout (std140, binding = 2) buffer Triangles {
	Triangle triangles[];
};

// Setup for ray creation
struct Ray {
    mediump vec3 A;
    mediump vec3 B;
} ray;

vec3 ray_origin(Ray r) {
    return r.A;
}

vec3 ray_direction(Ray r) {
    return r.B;
}

vec3 ray_point_at_param(Ray r, float t) {
    return r.A + t * r.B;
}

vec3 unit_vector(vec3 v) {
    return v / length(v);
}

bool hit_sphere(vec3 center, float radius, Ray r) {
    vec3 oc = vec3(ray_origin(r) - center);
    vec3 direction = ray_direction(r);
    mediump float a = dot(direction, direction);
    mediump float b = dot(oc, direction) * 2.0;
    mediump float c = dot(oc, oc) - radius * radius;
    mediump float discriminant = b * b - 4 * a * c;

    return discriminant > 0;
}

// Determine a linearly interpreted color value
vec3 color(Ray r) {
    if (hit_sphere(vec3(0, 0, -1), 0.5, r)) {
        return vec3(1, 0, 0);
    }

    mediump vec3 unit_direction = unit_vector(ray_direction(r));
    mediump float t = 0.5 * (unit_direction.y + 1.0);
    return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}

void main() {
    int width = 800;
    int height = 600;

    mediump vec3 lower_left_corner = vec3(-1.0, 1.0, -1.0);
    mediump vec3 horizontal = vec3(2.0, 0.0, 0.0);
    mediump vec3 vertical = vec3(0.0, 1.0, 0.0);
    mediump vec3 origin = vec3(0.0, 0.0, 0.0);

    mediump float u = float(gl_GlobalInvocationID.x / width);
    mediump float v = float(gl_GlobalInvocationID.y / height);
    Ray r = Ray(origin, lower_left_corner + u * horizontal + v * vertical);

    vec3 c = color(r);
    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(c, 0.0));
}