#version 450

// Needed so that final output spans the entire texture
layout(local_size_x = 16, local_size_y = 16) in;

// The output of the raytracing pass is going to be written here
layout(binding = 0, rgba8) uniform writeonly image2D resultImage;

// Only medium precision floats are needed so we declare that here
precision mediump float;

// Defining some constants
// This will only work in GLSL 4.4 and above!
const float INFINITY = 1.0 / 0.0;
const float EPSILON = 0.000000001;
const int NUM_BOUNCES = 4;
const int NUM_SAMPLES = 16;

// Function for generating pseudo-random numbers
// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float rand(in vec2 co) {
  return 2.0 * fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453) - 1;
}

// Experimental pseudo-random number generator. Will use this later
float GPURnd(inout vec4 state) {
  const vec4 q = vec4(1225.0, 1585.0, 2457.0, 2098.0);
  const vec4 r = vec4(1112.0, 367.0, 92.0, 265.0);
  const vec4 a = vec4(3423.0, 2646.0, 1707.0, 1999.0);
  const vec4 m = vec4(4194287.0, 4194277.0, 4194191.0, 4194167.0);
  vec4 beta = floor(state / q);
  vec4 p = a * (state - beta * q) - beta * r;
  beta = (sign(-p) + vec4(1.0)) * vec4(0.5) * m;
  state = (p + beta);
  return fract(dot(state / m, vec4(1.0, -1.0, 1.0, -1.0)));
}

// UBO for storing camera values
layout(binding = 1) uniform Camera {
  vec3 origin;
  vec3 lower_left_corner;
  vec3 horizontal;
  vec3 vertical;
  vec3 u;
  vec3 v;
  vec3 w;
  float lens_radius;
}
cam;

// Data structure declarations for BVH
struct AABB {
  vec3 min;
  vec3 max;
};

struct Triangle {
  vec3 v0;
  vec3 v1;
  vec3 v2;
  vec3 normal;
  AABB box;
};

struct BvhNode {
  Triangle left;
  Triangle right;
  AABB box;
  bool is_leaf;
};

layout(std140, binding = 2) buffer BVH { BvhNode nodes[]; };

// Struct to describe material interaction. The material type
// is IDed through a simple integer. The mapping is as follows:
// * 1 - Diffuse
// * 2 - Metal
// * 3 - Dielectric (glass, etc.)
const int LAMBERTIAN = 1;
const int METAL = 2;
const int DIELECTRIC = 3;
struct Material {
  vec3 albedo;
  float fuzz;
  float ref_idx;
  int scatter_function;
};

// A struct used for recording data about intersections
struct HitRecord {
  float t;
  vec3 p;
  vec3 normal;
  Material mat;
};

// Setup for ray creation
struct Ray {
  vec3 origin;
  vec3 direction;
};

vec3 ray_point_at_param(in Ray ray, in float t) {
  return ray.origin + t * ray.direction;
}

// Sample unit disk for scattering
vec3 random_in_unit_disk(in vec2 co) {
  vec3 p;
  int n = 0;
  do {
    p = vec3(rand(co.xy), rand(co.yx), 0.0) - vec3(1.0, 1.0, 0.0);
  } while (dot(p, p) >= 1.0 && ++n < 3);
  return p;
}

// Sample the unit sphere for shadows
vec3 random_in_unit_sphere(vec3 p) {
  int n = 0;
  do {
    p = vec3(rand(p.xy), rand(p.zy), rand(p.xz));
  } while ((length(p) * length(p)) >= 1.0 && ++n < 3);
  return p;
}

Ray get_ray(in float s, in float t) {
  vec3 rd = cam.lens_radius * random_in_unit_disk(vec2(s, t));
  vec3 offset = vec3(cam.u * rd.x + cam.v * rd.y);
  return Ray(cam.origin + offset, cam.lower_left_corner + s * cam.horizontal +
                                      t * cam.vertical - cam.origin - offset);
}

bool triangle_hit(in Ray ray, in Triangle tri, in float t_min, in float t_max,
                  inout HitRecord rec) {
  vec3 v0v1 = tri.v1 - tri.v0;
  vec3 v0v2 = tri.v2 - tri.v0;
  vec3 pvec = cross(ray.direction, v0v2);
  float d = dot(v0v1, pvec);
  if (abs(d) < EPSILON) {
    // Plane is parallel to ray. No intersection
    return false;
  }

  float invD = 1.0 / d;
  vec3 tvec = ray.origin - tri.v0;
  float u = dot(tvec, pvec) * invD;
  if (u < 0.0 || u > 1.0) {
    // Ray missed the plane
    return false;
  }

  vec3 qvec = cross(tvec, v0v1);
  float v = dot(ray.direction, qvec) * invD;
  if (v < 0 || u + v > 1.0) {
    // Ray missed the plane
    return false;
  }

  // Triangle was hit return data
  float temp_t = dot(v0v2, qvec) * invD;
  rec.t = temp_t;
  rec.p = ray_point_at_param(ray, rec.t);
  rec.normal = tri.normal;
  // Diffuse material for testing
  rec.mat = Material(vec3(0.5, 0.5, 0.0), 0.0, 0.0, 1);
  return true;
}

bool aabb_hit(in Ray ray, in AABB box, in float t_min, in float t_max) {
  // Iterate over each axis and see if an intersection occurs
  for (int a = 0; a < 3; a++) {
    float invD = 1.0 / ray.direction[a];
    float t0 = (box.min[a] - ray.origin[a]) * invD;
    float t1 = (box.max[a] - ray.origin[a]) * invD;
    if (invD < 0.0) {
      float temp = t0;
      t0 = t1;
      t1 = temp;
    }
    t_min = t0 > t_min ? t0 : t_min;
    t_max = t1 < t_max ? t1 : t_max;
    if (t_max <= t_min) {
      return false;
    }
  }
  return true;
}

bool bvh_hit(in Ray ray, inout BvhNode node, in float t_min, in float t_max,
             inout HitRecord rec) {
  if (aabb_hit(ray, node.box, t_min, t_max)) {
    HitRecord left_rec, right_rec;
    bool hit_left = triangle_hit(ray, node.left, t_min, t_max, left_rec);
    bool hit_right = triangle_hit(ray, node.right, t_min, t_max, right_rec);
    if (hit_left && hit_right) {
      if (left_rec.t < right_rec.t) {
        rec = left_rec;
        node = node.left.box;
      } else {
        rec = right_rec;
        node = node.right.box;
      }
      return true;
    } else if (hit_left) {
      rec = left_rec;
      node = node.right.box;
      return true;
    } else if (hit_right) {
      rec = right_rec;
      node = node.right.box;
      return true;
    }
  }
  return false;
}

bool scatter_lambertian(in Ray ray, in HitRecord rec, inout vec3 attenuation,
                        inout Ray scattered) {
  vec3 target = rec.p + rec.normal + random_in_unit_sphere(rec.p);
  scattered = Ray(rec.p, target - rec.p);
  attenuation = rec.mat.albedo;
  return true;
}

bool scatter_metal(in Ray ray, in HitRecord rec, inout vec3 attentuation,
                   inout Ray scattered) {
  vec3 reflected = reflect(normalize(ray.direction), rec.normal);
  scattered =
      Ray(rec.p, reflected + rec.mat.fuzz * random_in_unit_sphere(rec.p));
  attentuation = rec.mat.albedo;
  return dot(scattered.direction, rec.normal) > 0.0;
}

bool refract(in vec3 v, in vec3 n, in float ni_over_nt, inout vec3 refracted) {
  vec3 uv = normalize(v);
  float dt = dot(uv, n);
  float discriminant = 1.0 - ni_over_nt * ni_over_nt * (1 - dt * dt);
  if (discriminant > 0.0) {
    refracted = ni_over_nt * (uv - n * dt) - n * sqrt(discriminant);
    return true;
  }
  return false;
}

// Schlick approximation function
float schlick(in float cosine, in float ref_idx) {
  float r0 = (1.0 - ref_idx) / (1.0 + ref_idx);
  r0 = r0 * r0;
  return r0 + (1.0 - r0) * pow((1.0 - cosine), 5);
}

bool scatter_dielectric(in Ray ray, inout HitRecord rec,
                        inout vec3 attentuation, inout Ray scattered) {
  vec3 outward_normal;
  vec3 reflected = reflect(ray.direction, rec.normal);
  float ni_over_nt;
  attentuation = vec3(1.0, 1.0, 1.0);
  vec3 refracted;
  float reflect_prob;
  float cosine;
  if (dot(ray.direction, rec.normal) > 0.0) {
    outward_normal = -rec.normal;
    ni_over_nt = rec.mat.ref_idx;
    cosine = rec.mat.ref_idx * dot(ray.direction, rec.normal) /
             length(ray.direction);
  } else {
    outward_normal = rec.normal;
    ni_over_nt = 1.0 / rec.mat.ref_idx;
    cosine = -dot(ray.direction, rec.normal) / length(ray.direction);
  }

  if (refract(ray.direction, outward_normal, ni_over_nt, refracted)) {
    reflect_prob = schlick(cosine, rec.mat.ref_idx);
  } else {
    scattered = Ray(rec.p, reflected);
    reflect_prob = 1.0;
  }

  if (rand(ray.direction.xy) < reflect_prob) {
    scattered = Ray(rec.p, reflected);
  } else {
    scattered = Ray(rec.p, refracted);
  }

  return true;
}

bool scatter(in Ray ray, inout HitRecord rec, inout vec3 attentuation,
             inout Ray scattered) {
  if (rec.mat.scatter_function == LAMBERTIAN) {
    return scatter_lambertian(ray, rec, attentuation, scattered);
  } else if (rec.mat.scatter_function == METAL) {
    return scatter_metal(ray, rec, attentuation, scattered);
  } else {
    return scatter_dielectric(ray, rec, attentuation, scattered);
  }
}

bool intersect(in Ray ray, in float t_min, in float t_max,
               inout HitRecord rec) {
  HitRecord temp_rec;
  bool bvh_hit = true;
  float closest_so_far = t_max;
  Node root = nodes[0];
  // TODO Optimize for loop here
  while (bvh_hit && !root.is_leaf) {
    bvh_hit = bvh_hit(ray, nodes[i], t_min, closest_so_far, temp_rec);
      if (root.is_leaf) {
        // Terminate since we are at the leaf node
        closest_so_far = temp_rec.t;
        rec = temp_rec;
        return true;
      }

      if (bvh_hit) {
        // Need to determine which way to traverse
        closest_so_far = temp_rec.t;
        rec = temp_rec;
      }
    }
  }
  // Did not hit the BVH so no intersection was made
  return false;

  //for (int i = 0; i < nodes.length(); i++) {
  //  if (bvh_hit(ray, nodes[i], t_min, closest_so_far, temp_rec)) {
  //    hit_anything = true;
  //    closest_so_far = temp_rec.t;
  //    rec = temp_rec;
  //  }
  //}
  //return hit_anything;
}

vec3 render(in Ray ray) {
  HitRecord rec;
  vec3 total_attenuation = vec3(1.0, 1.0, 1.0);
  // Iterate for a max number of bounces
  for (int i = 0; i < NUM_BOUNCES; i++) {
    if (intersect(ray, EPSILON, INFINITY, rec)) {
      // Intersected an object and need to bounce the ray
      Ray scattered;
      vec3 attenuation;
      if (scatter(ray, rec, attenuation, scattered)) {
        total_attenuation *= attenuation;
        ray = scattered;
      } else {
        total_attenuation *= vec3(0.0, 0.0, 0.0);
      }
    } else {
      // No objects intersected. Return background color
      vec3 unit_direction = normalize(ray.direction);
      float t = 0.5 * (unit_direction.y + 1.0);
      return total_attenuation *
             ((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0));
    }
  }
}

void main() {
  ivec2 dim = imageSize(resultImage);
  vec3 finalColor = vec3(0.0, 0.0, 0.0);
  //if (nodes[3].is_leaf) {
  //  finalColor = nodes[3].left.v2;
  //}
  // For loop to sample multiple times
  for (int s = 0; s < NUM_SAMPLES; s++) {
    float u =
        (gl_GlobalInvocationID.x + rand(gl_GlobalInvocationID.xy + s)) / dim.x;
    float v =
        (gl_GlobalInvocationID.y + rand(gl_GlobalInvocationID.xy + s)) / dim.y;
    finalColor += render(get_ray(u, v));
  }

  // Normalize the color with the number of samples
  finalColor /= NUM_SAMPLES;
  // Simple gamma-correction at 1/2
  finalColor = sqrt(finalColor.xyz);

  imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy),
             vec4(finalColor, 0.0));
}